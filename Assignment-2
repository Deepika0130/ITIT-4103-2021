{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning Lab - 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Name- Vijay Karunakaran<br />\n",
    "Roll No- 2018IMT-104"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A. Create a random dataset with two input features and one ouptut feature (class labels). The two input features shall be random variables sampled from a gaussian distribution with mean 8 , standard deviation of 1.5 as well as the output feature may be sampled from a binomial distribution with probability of 1 as 0.6. Create 20 instances of the sampled data and plot the same."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Procedure:\n",
    "#### Step-1 : Make two arrays of random numbers of size 20 from the normal distributions with a mean = 8, and standard deviation = 1.5\n",
    "#### Step-2 : Make an array of numbers with (0,1) that follows binomial distribution with n = 20 and p = 0.6 as parameters\n",
    "#### Step-3 : Plot them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.colors\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import sklearn.datasets as dt\n",
    "from scipy.stats import binom\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn.datasets import make_gaussian_quantiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "# For output label\n",
    "n = 20\n",
    "p = 0.6\n",
    "r_values = list(range(n + 1))\n",
    "# obtaining the mean and variance \n",
    "mean, var = binom.stats(n, p)\n",
    "# list of pmf values\n",
    "dist = [binom.pmf(r, n, p) for r in r_values ]'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.099511627776003e-08, 3.298534883327999e-07, 4.7004122087424025e-06, 4.230370987868157e-05, 0.0002696861504765946, 0.0012944935222876511, 0.004854350708578698, 0.014563052125736161, 0.035497439556481845, 0.07099487911296357, 0.11714155053639011, 0.15973847800416796, 0.17970578775468918, 0.16588226561971353, 0.1244116992147844, 0.07464701952887058, 0.034990790404158166, 0.012349690730879373, 0.0030874226827198427, 0.00048748779200839646, 3.656158440062977e-05]\n"
     ]
    }
   ],
   "source": [
    "#print(dist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.datasets import make_gaussian_quantiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "X1, Y1 = make_gaussian_quantiles(n_features=2, n_classes=1,n_samples=20)\n",
    "#print(Y1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1626c8ca828>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X1[:, 0], X1[:, 1], marker='o', c=Y1, s=25, edgecolor='k')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.35972562,  6.68610799,  8.65039732,  8.70349808,  6.88419725,\n",
       "        9.69008252,  7.2900816 ,  9.31767616,  7.71057554,  7.63857309,\n",
       "        9.72553977, 10.05077136,  7.17702957,  6.63504255,  7.65858226,\n",
       "        6.45229315,  8.72846669, 10.08898635, 10.38554   ,  6.52140292])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for input features\n",
    "mean, std = 8, 1.5        # for feature-1 \n",
    "x1 = np.random.normal(mean, std, 20)\n",
    "x1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.29197552,  7.7608413 ,  8.44718095,  8.79494343,  8.94299314,\n",
       "        8.60255012,  6.16523597,  7.3864118 ,  9.334135  ,  7.10406457,\n",
       "        6.70198293,  7.21750516, 11.00561585,  8.11113066,  8.55963102,\n",
       "        7.02563957,  8.17290981,  9.78490895,  6.18046103,  7.63624821])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mu, sigma = 8, 1.5 # for feature-2\n",
    "x2 = np.random.normal(mean, std, 20)\n",
    "x2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1]\n"
     ]
    }
   ],
   "source": [
    "# for output label\n",
    "n_samples=20\n",
    "n=1\n",
    "y=[]\n",
    "for i in range(n_samples):\n",
    "        y +=[ np.random.binomial(1,0.6) for i in range(n)]\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    feature-1  feature-2  output-label\n",
      "0   10.359726  10.291976             0\n",
      "1    6.686108   7.760841             1\n",
      "2    8.650397   8.447181             0\n",
      "3    8.703498   8.794943             1\n",
      "4    6.884197   8.942993             0\n",
      "5    9.690083   8.602550             1\n",
      "6    7.290082   6.165236             0\n",
      "7    9.317676   7.386412             1\n",
      "8    7.710576   9.334135             1\n",
      "9    7.638573   7.104065             1\n",
      "10   9.725540   6.701983             1\n",
      "11  10.050771   7.217505             1\n",
      "12   7.177030  11.005616             1\n",
      "13   6.635043   8.111131             1\n",
      "14   7.658582   8.559631             0\n",
      "15   6.452293   7.025640             0\n",
      "16   8.728467   8.172910             1\n",
      "17  10.088986   9.784909             1\n",
      "18  10.385540   6.180461             1\n",
      "19   6.521403   7.636248             1\n"
     ]
    }
   ],
   "source": [
    "df = pd.DataFrame( columns = ['feature-1', 'feature-2','output-label'])\n",
    "df['feature-1']=x1\n",
    "df['feature-2']=x2\n",
    "df['output-label']=y\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "color_map = plt.cm.get_cmap('RdYlBu')\n",
    "color_map_discrete = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", [\"red\",\"cyan\",\"magenta\",\"blue\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Plotting')"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting\n",
    "\n",
    "my_scatter_plota = plt.scatter(x1,\n",
    "                                  x2,\n",
    "                                  c=y,\n",
    "                                  vmin=min(y),\n",
    "                                  vmax=max(y),\n",
    "                                  s=35,\n",
    "                                  cmap=color_map_discrete)\n",
    "plt.title('Plotting')\n",
    "# Red dots- 0\n",
    "# Blue dots - 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## B. Create a random dataset with two input features and one ouptut feature. Create 20 instances of data by sampling the two input features from a gaussian distribution with mean 8 , standard deviation of 1.5. Label these instances as 0. Generate another 20 instances of data by sampling the two input features from a gaussian distribution with mean 15 and standard deviation 1.5 and label these instances as 1. Plot these."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Procedure:\n",
    "#### Step-1 : Make two arrays of random numbers of size 20 from the normal distributions with a mean = 8, and standard deviation = 1.5\n",
    "#### Step-2 : Make a list of zeros of size 20\n",
    "#### Step-3 : Make two arrays of random numbers of size 20 from the normal distributions with a mean = 15, and standard deviation = 1.5\n",
    "#### Step-4 : Make a list of ones of size 20\n",
    "#### Step-5 : Concatenate the arrays formed from Step-1 and Step-3 and also concatenate both the lists from Step-2 and Step-4\n",
    "#### Step-6 : The dataset is formed and Plot them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1626cbf13c8>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plt.title(\"Two blobs\", fontsize='small')\n",
    "X1, Y1 = make_blobs(n_samples=20,n_features=2, centers=2)\n",
    "plt.scatter(X1[:, 0], X1[:, 1], marker='o', c=Y1,\n",
    "            s=25, edgecolor='k')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean, std = 8, 1.5           # for input-1 features\n",
    "x11 = np.random.normal(mean,std,20)\n",
    "x12 = np.random.normal(mean,std,20)\n",
    "y1  = [0 for i in range(20)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean, std = 15, 1.5          # for input-1 features\n",
    "x21 = np.random.normal(mean,std,20)\n",
    "x22 = np.random.normal(mean,std,20)\n",
    "y2  = [1 for i in range(20)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    feature-1  feature-2  output-feature\n",
      "0   10.046253   7.615077               0\n",
      "1    9.177721   5.424646               0\n",
      "2    8.515365   4.161133               0\n",
      "3    8.765968   7.944948               0\n",
      "4    6.170963   8.084975               0\n",
      "5    6.506700   7.514955               0\n",
      "6    6.738948   8.144809               0\n",
      "7    6.519734   7.168010               0\n",
      "8    6.792694   8.181202               0\n",
      "9    6.293718   5.272556               0\n",
      "10   9.096418   8.773903               0\n",
      "11   6.743325   7.123525               0\n",
      "12   7.885104  10.362159               0\n",
      "13   7.866550   8.890447               0\n",
      "14   9.622167   8.583873               0\n",
      "15   8.238280   9.312962               0\n",
      "16   9.029276   7.302790               0\n",
      "17   6.773844  12.063043               0\n",
      "18  10.027915   8.182000               0\n",
      "19   6.839876   8.569299               0\n",
      "20  16.226057  15.266302               1\n",
      "21  13.492560  14.144917               1\n",
      "22  13.645676  17.229545               1\n",
      "23  16.807067  13.374964               1\n",
      "24  13.255494  15.426102               1\n",
      "25  14.726409  16.091209               1\n",
      "26  13.486795  16.967176               1\n",
      "27  16.723661  11.831466               1\n",
      "28  13.291611  14.042705               1\n",
      "29  15.356998  14.614283               1\n",
      "30  12.796797  15.556497               1\n",
      "31  17.208009  14.068508               1\n",
      "32  16.561662  14.633422               1\n",
      "33  15.674868  15.563780               1\n",
      "34  14.973727  15.583231               1\n",
      "35  12.709990  14.071506               1\n",
      "36  16.683227  13.908345               1\n",
      "37  15.401735  14.163888               1\n",
      "38  16.613403  16.027814               1\n",
      "39  13.997305  12.486923               1\n"
     ]
    }
   ],
   "source": [
    "df1 = pd.DataFrame( columns = ['feature-1', 'feature-2','output-feature'])\n",
    "df1['feature-1'] = x11\n",
    "df1['feature-2'] = x12\n",
    "df1['output-feature'] = y1\n",
    "\n",
    "\n",
    "df2 = pd.DataFrame( columns = ['feature-1', 'feature-2','output-feature'])\n",
    "df2['feature-1'] = x21\n",
    "df2['feature-2'] = x22\n",
    "df2['output-feature'] = y2\n",
    "df2=pd.concat([df1, df2],axis=0,ignore_index=True)\n",
    "print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Plotting')"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_scatter_plot = plt.scatter(df2['feature-1'],\n",
    "                                  df2['feature-2'],\n",
    "                                  c=df2['output-feature'],\n",
    "                                  vmin=min(df2['output-feature']),\n",
    "                                  vmax=max(df2['output-feature']),\n",
    "                                  s=35,\n",
    "                                  cmap=color_map_discrete)\n",
    "plt.title('Plotting')\n",
    "\n",
    "# Red dots- 0\n",
    "# Blue dots - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inference:\n",
    "##### It is always observed that any real and ideal datasets generally obey some distribution, i.e., samples follow some distributions. If we know it's distribution, it's very obvious to find an appropriate hypothesis function. By reverse engineering this idea, we can test any particular hypothesis by an appropriate samples of data that follows some distribution, thereby we can check the accuracy of the hypothesis. In such situations, randomly generated synthetic data would be very useful."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

